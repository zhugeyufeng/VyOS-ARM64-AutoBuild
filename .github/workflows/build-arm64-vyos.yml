name: Build VyOS ARM64 Image

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: '发布版本名称(可选)'
        required: false
        default: 'VyOS ARM64 自动构建'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout vyos-build
        uses: actions/checkout@v4
        with:
          repository: vyos/vyos-build
          ref: current
          path: vyos-build

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Configure Docker permissions
        run: |
          sudo usermod -aG docker $USER
          # 确保Docker可以正常工作
          docker info

      - name: Install build dependencies
        run: |
          # 更新包索引
          sudo apt-get update
          
          - name: Install GRUB for ARM64
            run: |
              # 查找可用的ARM64 GRUB包
              echo "查找可用的ARM64 GRUB包..."
              apt-cache search grub | grep -i arm64 || true
              
              # 尝试从各种可能的源安装GRUB
              # 方法1: 标准包
              sudo apt-get install -y grub-efi-arm64-bin || \
              # 方法2: 签名包
              sudo apt-get install -y grub-efi-arm64-signed || \
              # 方法3: 使用通用包
              sudo apt-get install -y grub-common grub2-common grub-efi-arm64 || \
              # 方法4: 从universe仓库
              (sudo add-apt-repository universe && sudo apt-get update && sudo apt-get install -y grub-efi-arm64-bin) || \
              # 如果全都失败，记录错误但继续执行
              echo "无法安装ARM64 GRUB包，后续构建可能会失败"
              
              # 手动创建GRUB所需目录
              sudo mkdir -p /usr/lib/grub/arm64-efi/
          sudo apt-get install -y qemu-utils parted xz-utils dosfstools squashfs-tools git \
            python3-cracklib build-essential debhelper libpam-dev libnss3-dev uuid-dev \
            libssl-dev grub2-common e2fsprogs debootstrap
          
          # 尝试安装grub-efi-arm64-bin (如果可用)
          sudo apt-get install -y grub-efi-arm64-bin || echo "grub-efi-arm64-bin not available"
          
          # 安装Python依赖
          sudo pip3 install tomli jinja2 gitpython
          
          # 如果未通过pip安装python-cracklib，使用系统包
          if ! python3 -c "import cracklib" 2>/dev/null; then
            echo "尝试使用apt安装cracklib..."
            sudo apt-get install -y python3-cracklib
          fi
          
          # 验证工具已安装
          echo "检查必要工具是否已安装:"
          for tool in docker qemu-img parted xz mkfs.vfat mksquashfs git; do
            if command -v $tool >/dev/null 2>&1; then
              echo "$tool: 已安装"
            else
              echo "$tool: 未安装"
            fi
          done
          
          # 验证Python模块已安装
          echo "检查必要Python模块是否已安装:"
          for module in tomli jinja2 git cracklib; do
            if python3 -c "import $module" 2>/dev/null; then
              echo "$module: 已安装"
            else
              echo "$module: 未安装"
              exit 1
            fi
          done

      - name: Install GRUB for ARM64
        run: |
          # 查找可用的ARM64 GRUB包
          echo "查找可用的ARM64 GRUB包..."
          apt-cache search grub | grep -i arm64 || true
          
          # 尝试从各种可能的源安装GRUB
          # 方法1: 标准包
          sudo apt-get install -y grub-efi-arm64-bin || \
          # 方法2: 签名包
          sudo apt-get install -y grub-efi-arm64-signed || \
          # 方法3: 使用通用包
          sudo apt-get install -y grub-common grub2-common grub-efi-arm64 || \
          # 方法4: 从universe仓库
          (sudo add-apt-repository universe && sudo apt-get update && sudo apt-get install -y grub-efi-arm64-bin) || \
          # 如果全都失败，记录错误但继续执行
          echo "无法安装ARM64 GRUB包，后续构建可能会失败"
          
          # 手动创建GRUB所需目录
          sudo mkdir -p /usr/lib/grub/arm64-efi/

      - name: Fix Python path for cracklib
        run: |
          # 查找cracklib模块位置
          CRACKLIB_PATH=$(find /usr/lib/ -name "cracklib.*.so" 2>/dev/null)
          if [ ! -z "$CRACKLIB_PATH" ]; then
            CRACKLIB_DIR=$(dirname "$CRACKLIB_PATH")
            echo "Found cracklib at: $CRACKLIB_DIR"
            export PYTHONPATH=$PYTHONPATH:$CRACKLIB_DIR
          fi

      - name: Build ARM64 squashfs (in Docker)
        run: |
          cd vyos-build
          # 设置Python路径，确保可以找到所有模块
          export PYTHONPATH=$PYTHONPATH:$(pwd):$(pwd)/build/vyos-1x/python
          sudo -E make docker-arm64
          sudo ./configure --architecture arm64
          sudo make image

      - name: Generate version tag
        id: version
        run: echo "tag=vyos-arm64-$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Package to bootable disk image
        run: |
          # 确保构建脚本存在
          if [ ! -f ./scripts/build_image.sh ]; then
            echo "构建脚本不存在，正在检查目录结构..."
            find . -name "build_image.sh" -type f
            exit 1
          fi
          
          chmod +x ./scripts/build_image.sh
          sudo ./scripts/build_image.sh ./vyos-build/build/*/vyos-*.squashfs

      - name: Upload image to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ inputs.release_name || format('VyOS ARM64 构建 - {0}', steps.version.outputs.tag) }}
          body: |
            VyOS ARM64 自动构建版本 - ${{ steps.version.outputs.tag }}
            
            包含以下文件:
            - vyos-arm64.img - 可直接写入SD卡/eMMC的原始镜像
            - vyos-arm64.qcow2 - QEMU/KVM虚拟机兼容格式
            
            构建时间: ${{ github.event.repository.updated_at }}
          files: |
            vyos-arm64.img
            vyos-arm64.qcow2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Upload image as artifact (optional backup)
        uses: actions/upload-artifact@v4
        with:
          name: vyos-arm64-disk
          path: |
            vyos-arm64.img
            vyos-arm64.qcow2
          retention-days: 7
